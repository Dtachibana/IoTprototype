#include <ESP8266WiFi.h>
#include <FS.h>
#include <ESP8266HTTPClient.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>

// #include <HttpClient.h>

#define BUFBIT 12
#define BUFSIZE (1<<BUFBIT)
#define BUFMASK (BUFSIZE-1)

#define FREQUENCY 8000
#define DURATION 16000
#define HOSTNAME ''

#define HTML_HEADER "<!doctype html>"\ "<html><head><meta charset=\"UTF-8\"/>"\ "<meta name=\"viewport\" content=\"width=device-width\"/>"\ "</head><body>" 
#define HTML_FOOTER "</body></html>"

#define MQTT_MAX_PACKET_SIZE 1024

const char* ssid = "";
const char* password = "";

//const char* ssid = "Pi3-ictresearch";
//const char* password = "Pi3ict12345a";

String payload = "";

int val = 0;           // 読み取った値を格納する変数
int adc_bias;
int16_t buffer[16000];
int bitsize = 16;

const char* mqtthost = "mqtt.beebotte.com";

// Beebotteのチャンネルトークン
const char* channelToken = "1487141759330_9wR8rnmUk7UOaLKQ";

// トピック名（"channel/resource"の形式）
const char* topic = "ifttt/action";

const char *clientID = "ESP8266";


// メッセージを受け取ったらシリアルにプリント
void callback(char* topic, byte* payload, unsigned int length) {
  // PubSubClient.hで定義されているMQTTの最大パケットサイズ
  char buffer[MQTT_MAX_PACKET_SIZE];

  snprintf(buffer, sizeof(buffer), "%s", payload);
  Serial.println("received:");
  Serial.print("topic: ");
  Serial.println(topic);
  Serial.println(buffer);

  // 受け取ったJSON形式のペイロードをデコードする
  StaticJsonBuffer<MQTT_MAX_PACKET_SIZE> jsonBuffer;
  JsonObject& root = jsonBuffer.parseObject(buffer);

  if (!root.success()) {
    Serial.println("parseObject() failed");
    return;
  }

  const char* parsedPayload = root["data"];
  if (parsedPayload != NULL) {
    Serial.print("payload: ");
    Serial.println(parsedPayload);
  }
}



File fd;
WiFiClient client;

PubSubClient pubsubclient(mqtthost, 1883, client);

void wificonnect(){
  Serial.println();
  Serial.print("Connecting to ");
  Serial.print(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  } 
  Serial.println("");
  Serial.print("WiFi connected, IP address: ");
  Serial.println(WiFi.localIP());
}

void init_adc_bias() {
  for (int i = 0; i < 1 << 8; i++) {
    adc_bias += analogRead(A0);
    delay(1);   //    os_delay(1);
  }
  adc_bias >>= 8;
}

void sampling(){
  for (int i = 0; i < 16000; i++) {   //2秒サンプリング処理を繰り返す
     uint16_t sensorValue = analogRead(A0) - adc_bias; //アナログファイルの読み込み
     buffer[i] = sensorValue;//サンプリングファイルの作成
//     Serial.println(buffer[i]);
     ESP.wdtFeed();
  }
}

void makefile(){
  SPIFFS.format();  // 書き込み速度のムラをなくす
  fd = SPIFFS.open("/sample.wav", "w"); 
  writeRiffHeader(&fd);       // ヘッダの書き込み
  ESP.wdtDisable();
  for (long i = 0; i < 16000; i++) {   //2秒サンプリング処理を繰り返す  
//    Serial.print("debug makefile 5-");
//    Serial.println(i);
    fd.write((uint8_t*)buffer[i], i);
 //   fd.write((uint8_t*)buffer[i], bitsize); //音声ファイルの書き込み（まだ途中）
//    Serial.println("ok");
    fd.close();
    ESP.wdtFeed();
  }
}

void writeRiffHeader(Stream *fd) {
  struct {
    char riff[4];
    int32_t len1;
    char wave[4];
    char fmt[4];
    int32_t formatSize;
    int16_t formatCode;
    int16_t channelCount;
    int32_t samplingRate;
    int32_t bytesPerSecond;
    int16_t bytesPerBlock;
    int16_t bitsPerSample;
    char data[4];
    int32_t len2;
  } riff_header;
  int size = sizeof(riff_header) - 4 + 4 + FREQUENCY * (DURATION / 1000) * 2;
  strncpy(riff_header.riff, "RIFF", 4);
  riff_header.len1 = size;
  strncpy(riff_header.wave, "WAVE", 4);
  strncpy(riff_header.fmt, "fmt ", 4);  // start of format chunk
  riff_header.formatSize = 16;
  riff_header.formatCode = 1;  // uncompressed PCM
  riff_header.channelCount = 1; // monoral
  riff_header.samplingRate = FREQUENCY; // Heltz
  riff_header.bytesPerSecond = FREQUENCY * 2;
  riff_header.bytesPerBlock = 2;  // 16bit monoral -> 2byte
  riff_header.bitsPerSample = 16; // 16bit
  strncpy(riff_header.data, "data", 4);  // start of data chunk
  riff_header.len2 = FREQUENCY * (DURATION / 1000) * 2;  // wave data size
  fd->write((uint8_t*)&riff_header, sizeof(riff_header));
}



void setup() {

  Serial.begin(9600);        // シリアル通信の初期化
  SPIFFS.begin();
  wificonnect();
  init_adc_bias();            // ゼロポイントの測定
}


void loop() {
  Serial.println("Start sampling");
//  sampling();
  Serial.println("sampling conplete!");
//  Serial.println(buffer);
  Serial.println("Start make file");
//  makefile();  //wavファイルの作成
  Serial.println("make file conplete!");
//  Serial.println("Start update to AWS");
//  https_connect();  //awsへの転送（途中）
//  ifttt_connect();
  Serial.println("update conplete!");
  Serial.println();


  // クライアントがサーバに接続されていなければ
  if (!pubsubclient.connected()) {
    // ユーザ名を指定して接続
    String username = "token:";
    username += channelToken;
    pubsubclient.connect(clientID, username.c_str(), NULL);
    Serial.println("MQTT connect start");
    if (pubsubclient.connected()) {
      Serial.println("MQTT connected");
      pubsubclient.setCallback(callback);

      // トピック名を指定してsubscribe
      pubsubclient.subscribe(topic);
    } else {
      Serial.print("MQTT connection failed: ");
      Serial.println(pubsubclient.state());
      delay(5000);
    }
  } else {
    // 既にサーバに接続されていれば通常処理を行う
    // トピック名を指定してpublish
//      String json = "{ \"value1\" : \"yeah\"}";
    pubsubclient.publish(topic,"{ \"value1\" : \"zzzzzmmmm\"}");    
    pubsubclient.loop();
    Serial.println("MQTT loop");
  }


  
  delay(10000);
}
