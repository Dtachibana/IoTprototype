#include <ESP8266WiFi.h>
#include <FS.h>
#include <ESP8266HTTPClient.h>

#define BUFBIT 12
#define BUFSIZE (1<<BUFBIT)
#define BUFMASK (BUFSIZE-1)

#define FREQUENCY 8000
#define DURATION 16000
#define HOSTNAME 'lineictreserch20161227.s3-ap-northeast-1.amazonaws.com'

const char* ssid = "Pi3-ictresearch";
const char* password = "Pi3ict12345a";

String payload = "";

int val = 0;           // 読み取った値を格納する変数
int adc_bias;
int16_t buffer[16000];
int bitsize = 16;
char awsAddress[] = "api.thingspeak.com";
//String awsAPIKey = "BLAHBLAHBLAH1234";
//String hostname = "lineictreserch20161227.s3-ap-northeast-1.amazonaws.com";

File fd;
WiFiClient client;

void wificonnect(){
  Serial.println();
  Serial.print("Connecting to ");
  Serial.print(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  } 
  Serial.println("");
  Serial.print("WiFi connected, IP address: ");
  Serial.println(WiFi.localIP());
}

void init_adc_bias() {
  for (int i = 0; i < 1 << 8; i++) {
    adc_bias += analogRead(A0);
    delay(1);   //    os_delay(1);
  }
  adc_bias >>= 8;
}

void sampling(){
  for (int i = 0; i < 16000; i++) {   //2秒サンプリング処理を繰り返す
     uint16_t sensorValue = analogRead(A0) - adc_bias; //アナログファイルの読み込み
     buffer[i] = sensorValue;//サンプリングファイルの作成
//     Serial.println(buffer[i]);
     ESP.wdtFeed();
  }
}

void makefile(){
  Serial.println("debug makefile 1");
  SPIFFS.format();  // 書き込み速度のムラをなくす
  Serial.println("debug makefile 2");
  fd = SPIFFS.open("/sample.wav", "w"); 
  Serial.println("debug makefile 3");
  writeRiffHeader(&fd);       // ヘッダの書き込み
  Serial.println("debug makefile 4");
  ESP.wdtDisable();
  for (long i = 0; i < 16000; i++) {   //2秒サンプリング処理を繰り返す  
//    Serial.print("debug makefile 5-");
//    Serial.println(i);
    fd.write((uint8_t*)buffer[i], i);
 //   fd.write((uint8_t*)buffer[i], bitsize); //音声ファイルの書き込み（まだ途中）
//    Serial.println("ok");
    fd.close();
    ESP.wdtFeed();
  }
}

void writeRiffHeader(Stream *fd) {
  struct {
    char riff[4];
    int32_t len1;
    char wave[4];
    char fmt[4];
    int32_t formatSize;
    int16_t formatCode;
    int16_t channelCount;
    int32_t samplingRate;
    int32_t bytesPerSecond;
    int16_t bytesPerBlock;
    int16_t bitsPerSample;
    char data[4];
    int32_t len2;
  } riff_header;
  int size = sizeof(riff_header) - 4 + 4 + FREQUENCY * (DURATION / 1000) * 2;
  strncpy(riff_header.riff, "RIFF", 4);
  riff_header.len1 = size;
  strncpy(riff_header.wave, "WAVE", 4);
  strncpy(riff_header.fmt, "fmt ", 4);  // start of format chunk
  riff_header.formatSize = 16;
  riff_header.formatCode = 1;  // uncompressed PCM
  riff_header.channelCount = 1; // monoral
  riff_header.samplingRate = FREQUENCY; // Heltz
  riff_header.bytesPerSecond = FREQUENCY * 2;
  riff_header.bytesPerBlock = 2;  // 16bit monoral -> 2byte
  riff_header.bitsPerSample = 16; // 16bit
  strncpy(riff_header.data, "data", 4);  // start of data chunk
  riff_header.len2 = FREQUENCY * (DURATION / 1000) * 2;  // wave data size
  fd->write((uint8_t*)&riff_header, sizeof(riff_header));
}

void https_connect() {
  HTTPClient client;
  String url = "https://lineictreserch20161227.s3-ap-northeast-1.amazonaws.com";
  client.begin(url);
  client.addHeader("Content-Type", "audio/wav");
//  client.addHeader("Connection", "close");
  client.addHeader("AWSAccessKeyId", "AKIAJE5FIHCBQWNJIQZA");
  client.addHeader("key", "sample.wav");

  File file = SPIFFS.open("/sample.wav", "r");
  long size = file.size();
  Serial.println("size is ");
  Serial.println(size);

  int httpCode = client.sendRequest("POST", &file, size);
  Serial.printf("Request for recognize sent.\n", size);
  file.close();

  if (httpCode == HTTP_CODE_OK) {
    payload = client.getString();
    Serial.println(payload.c_str());
  } else {
    Serial.printf("[HTTP] POST... failed, error: %s\n", client.errorToString(httpCode).c_str());
  }
  client.end();
}

void ifttt_connect() {
  Serial.println("Start connect to IFTTT");
//  HTTPClient client;
  HTTPClient client;
  String url = "http://maker.ifttt.com/trigger/mic_esp8266/with/key/bIgt8CUUM8ja6BeRi1VmJP";
//  String json = "{ \"value1\" : \"yeah\"}";
  client.begin(url);
  int httpCode = client.GET();
    Serial.println(httpCode);
  if (httpCode == HTTP_CODE_OK) {
    Serial.println("OK");
  } else {
    Serial.printf("[HTTP] GET... failed, error: %s\n", client.errorToString(httpCode).c_str());
  }
  client.end();
}

void setup() {
  Serial.begin(9600);        // シリアル通信の初期化
  SPIFFS.begin();
  wificonnect();
  init_adc_bias();            // ゼロポイントの測定
}


void loop() {
  Serial.println("Start sampling");
  sampling();
  Serial.println("sampling conplete!");
//  Serial.println(buffer);
  Serial.println("Start make file");
  makefile();  //wavファイルの作成
  Serial.println("make file conplete!");
  Serial.println("Start update to AWS");
  https_connect();  //awsへの転送（途中）
  Serial.println("update conplete!");
  Serial.println();
  delay(10000);
