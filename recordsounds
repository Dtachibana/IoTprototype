#include <ESP8266WiFi.h>
#include <FS.h>
#define FREQUENCY 8000
#define DURATION 16000
#define HOSTNAME 'lineictreserch20161227.s3-ap-northeast-1.amazonaws.com'

const char* ssid = "Pi3-ictresearch";
const char* password = "Pi3ict12345a";

int analogPin = 0; // ポテンショメータのワイプ(中央の端子)を接続する
                       // 両端はグランドと+5Vに接続
int val = 0;           // 読み取った値を格納する変数
int adc_bias;
int16_t buffer[16000];
int bitsize = 16;
char awsAddress[] = "api.thingspeak.com";
//String awsAPIKey = "BLAHBLAHBLAH1234";
//String hostname = "lineictreserch20161227.s3-ap-northeast-1.amazonaws.com";

File fd;
WiFiClient client;

void wificonnect(){
  Serial.println();
  Serial.print("Connecting to ");
  Serial.print(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  } 
  Serial.println("");
  Serial.print("WiFi connected, IP address: ");
  Serial.println(WiFi.localIP());
}

void init_adc_bias() {
  for (int i = 0; i < 1 << 8; i++) {
    adc_bias += analogRead(analogPin);
    delay(1);   //    os_delay(1);
  }
  adc_bias >>= 8;
}

void sampling(){
  for (long i = 0; i < 8000; i++) {   //2秒サンプリング処理を繰り返す
//     Serial.println(i);
     uint16_t sensorValue = analogRead(A0) - adc_bias; //アナログファイルの読み込み
     buffer[i] = sensorValue;//サンプリングファイルの作成
//     Serial.println(buffer[i]);
//     delay(1.25);     //125マイクロ秒待ち
  }
}

void makefile(){
  SPIFFS.format();  // 書き込み速度のムラをなくす
  fd = SPIFFS.open("/sample.wav", "w"); 
  writeRiffHeader(&fd);       // ヘッダの書き込み
  ESP.wdtDisable();
  for (long i = 0; i < 8000; i++) {   //2秒サンプリング処理を繰り返す  
//    Serial.println(i);
//    Serial.println(buffer[i]);
    fd.write((uint8_t*)buffer[i], bitsize); //音声ファイルの書き込み（まだ途中）
    ESP.wdtFeed();
  }
//  File fd2;
  Serial.println(fd.size());
}

void writeRiffHeader(Stream *fd) {
  struct {
    char riff[4];
    int32_t len1;
    char wave[4];
    char fmt[4];
    int32_t formatSize;
    int16_t formatCode;
    int16_t channelCount;
    int32_t samplingRate;
    int32_t bytesPerSecond;
    int16_t bytesPerBlock;
    int16_t bitsPerSample;
    char data[4];
    int32_t len2;
  } riff_header;
  int size = sizeof(riff_header) - 4 + 4 + FREQUENCY * (DURATION / 1000) * 2;
  strncpy(riff_header.riff, "RIFF", 4);
  riff_header.len1 = size;
  strncpy(riff_header.wave, "WAVE", 4);
  strncpy(riff_header.fmt, "fmt ", 4);  // start of format chunk
  riff_header.formatSize = 16;
  riff_header.formatCode = 1;  // uncompressed PCM
  riff_header.channelCount = 1; // monoral
  riff_header.samplingRate = FREQUENCY; // Heltz
  riff_header.bytesPerSecond = FREQUENCY * 2;
  riff_header.bytesPerBlock = 2;  // 16bit monoral -> 2byte
  riff_header.bitsPerSample = 16; // 16bit
  strncpy(riff_header.data, "data", 4);  // start of data chunk
  riff_header.len2 = FREQUENCY * (DURATION / 1000) * 2;  // wave data size
  fd->write((uint8_t*)&riff_header, sizeof(riff_header));
}

void updateaws()//(String tsData)
{
  if (client.connect(awsAddress, 80))
  { 
    Serial.println("Connected to aws");
//    Serial.println("Posting: " + tsData);

    // Create HTTP POST Data
//    tsData = "api_key="+ awsAPIKey //  +"&status="+ tsData;　途中
    Serial.println("start http protocol");
    client.println("POST /sample.wav HTTP/1.1");
    Serial.println("contenue http protocol 1");
    client.println("Host: lineictreserch20161227.s3-ap-northeast-1.amazonaws.com");
    Serial.println("contenue http protocol 2");
    client.println("Connection: close");
    Serial.println("contenue http protocol 3");
    client.println("Content-Type: audio/wav");
    Serial.println("contenue http protocol 4");
    client.println("Content-Length: 0");
//    client.println(tsData.length());
//    client.println();
    Serial.println("contenue http protocol 5");

//    client.print(tsData);
    client.stop();
    Serial.println("contenue http protocol 6");
  }
  else
  {
     Serial.println("Connection failed.");
  }
}

void setup() {
  Serial.begin(9600);        // シリアル通信の初期化
  wificonnect();
  init_adc_bias();            // ゼロポイントの測定
}


void loop() {
  Serial.println("Start sampling");
  sampling();
  Serial.println("sampling conplete!");
//  Serial.println(buffer);
  Serial.println("Start make file");
  makefile();  //wavファイルの作成
  Serial.println("make file conplete!");
  Serial.println("Start update to AWS");
  updateaws();  //awsへの転送（途中）
  Serial.println("update conplete!");
  Serial.println();
  delay(10000);
}
