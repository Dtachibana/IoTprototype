extern "C" {
  #include "user_interface.h"
}

#include <ESP8266WiFi.h>
#include <FS.h>
#include <ESP8266HTTPClient.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>

#define N 10

const char* ssid = "";
const char* password = "";
//const char* ssid = "";
//const char* password = "";

const char* mqtthost = "mqtt.beebotte.com";
const char* channelToken = "";
const char* topic = "ict/sound";
const char *clientID = "ESP8266";
#define MQTT_MAX_PACKET_SIZE 1024

volatile int BPM;
volatile int Signal;
volatile int IBI = 600;
volatile boolean Pulse = false;
volatile boolean QS = false;

volatile int Rate[N];
volatile unsigned long CurrBeatTime = 0;
volatile unsigned long LastBeatTime = 0;
volatile int P = 500;
volatile int T = 500;
volatile int Threshold = 512;
volatile int Amplifier = 100;

int PulseSensorPin = 17;
int FadePin = 4;
int FadeRate = 0;

void setupTimer(int m /* msec */) {
  timer0_isr_init();
  timer0_attachInterrupt(timer0_ISR);
  timer0_write(ESP.getCycleCount() + 80000L * m); // 80MHz/1000 == 1msec
}

void timer0_ISR (void) {
  noInterrupts();
  Signal = system_adc_read();
  CurrBeatTime = getCurrentTime(); // msec
  unsigned long interval = CurrBeatTime - LastBeatTime;
  
  // hold bottom
  if ((Signal < Threshold) && (interval > (IBI*3) / 5)) {
    if (Signal < T) {
      T = Signal;
    }
  }
   
  // hold peak
  if (Signal > Threshold && Signal > P) {
    P = Signal;
  }
  
  if (interval > 250 /* ms */) {
    
    // check if Signal is over Threshold
    if ((Signal > Threshold) && !Pulse && (interval > (IBI*3) / 5)) {
      Pulse = true;
      IBI = interval;
      
      if (Rate[0] < 0) { // first time
        Rate[0] = 0;
        LastBeatTime = getCurrentTime();
        setupTimer(10);
        noInterrupts();
        return;
      } else if (Rate[0] == 0) {  // second time
        for (int i = 0; i < N; ++i) {
          Rate[i] = IBI;
        }
      }
      
      word running_total = 0;     
      for (int i = 0; i < N-1; ++i) {
        Rate[i] = Rate[i+1];
        running_total += Rate[i];
      }
      
      Rate[N-1] = IBI;
      running_total += IBI;
      running_total /= N;
      BPM = 60000 / running_total;
      QS = true;
      LastBeatTime = getCurrentTime();
    }
  }
  
  // check if Signal is under Threshold
  if ((Signal < Threshold) && Pulse) {
    Pulse = false;
    Amplifier = P - T;
    Threshold = Amplifier / 2 + T; // revise Threshold
    P = Threshold;
    T = Threshold;
  }
  
  // check if no Signal is over 2.5 sec
  if (interval > 2500 /* ms */) {
    Threshold = 512;
    P = 500;
    T = 500;
    LastBeatTime = getCurrentTime();
    for (int i = 0; i < N; ++i) {
      Rate[i] = -1;
    }
  }
  setupTimer(10);
  interrupts();
}



unsigned long getCurrentTime() {
  return ESP.getCycleCount() / 80000L;
}

WiFiClient client;

PubSubClient pubsubclient(mqtthost, 1883, client);

void wificonnect(){
  Serial.println();
  Serial.print("Connecting to ");
  Serial.print(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  } 
  Serial.println("");
  Serial.print("WiFi connected, IP address: ");
  Serial.println(WiFi.localIP());
}

String buildJson() {
  String json = "{";
    json += "\"data\":";
    json += BPM;
    json += "}";

  return json;
}


void setup() {
  wificonnect();
  pinMode(FadePin, OUTPUT);
  analogWriteRange(255);
  Serial.begin(9600); 
  noInterrupts();
  setupTimer(10);
  interrupts();
  LastBeatTime = getCurrentTime(); // msec
}

void loop() {
  if (QS) {
    FadeRate = 255; 
    Serial.print("BPM: ");
    Serial.println(BPM);
    String json = buildJson();
    char jsonStr[200];
    json.toCharArray(jsonStr,200);

    if (!pubsubclient.connected()) {
      // ユーザ名を指定して接続
      String username = "token:";
      username += channelToken;
      pubsubclient.connect(clientID, username.c_str(), NULL);
      Serial.println("MQTT connect start");
      if (pubsubclient.connected()) {
        Serial.println("MQTT connected");
      } else {
        Serial.print("MQTT connection failed: ");
        Serial.println(pubsubclient.state());
        delay(500);
      }
    } else {
    // 既にサーバに接続されていれば通常処理を行う
    // トピック名を指定してpublish
      pubsubclient.publish(topic,jsonStr);    
      pubsubclient.loop();
      Serial.println("MQTT loop");
    }
    QS = false;
  }
  
  FadeRate -= 15;
  FadeRate = constrain(FadeRate, 0, 255);
  analogWrite(FadePin, FadeRate);
  delay(20);
}
